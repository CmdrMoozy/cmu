option(USE_ASAN "Enable AddressSanitizer for debug builds" ON)
option(USE_UBSAN "Enable UndefinedBehaviorSanitizer for debug builds" ON)
option(USE_TSAN "Enable ThreadSanitizer for debug builds" OFF)

function(cmuSetCompileFlags)
	if(CMAKE_CXX_COMPILER_ID MATCHES GNU)
		set(F_WARN "-pedantic -Wall -Wextra -Wcast-align -Wcast-qual")
		set(F_WARN "${F_WARN} -Wctor-dtor-privacy -Wlogical-op")
		set(F_WARN "${F_WARN} -Wformat=2 -Winit-self -Wlogical-op")
		set(F_WARN "${F_WARN} -Wmissing-include-dirs -Wnoexcept")
		set(F_WARN "${F_WARN} -Wold-style-cast -Wshadow")
		set(F_WARN "${F_WARN} -Woverloaded-virtual -Wredundant-decls")
		set(F_WARN "${F_WARN} -Wsign-conversion -Wsign-promo -Wundef")
		set(F_WARN "${F_WARN} -Wstrict-null-sentinel")
		set(F_WARN "${F_WARN} -Wdisabled-optimization -Werror")
		set(F_WARN "${F_WARN} -Wstrict-overflow=5")

		set(F_DBG "${F_WARN} -std=c++1y -g -O0 -fno-omit-frame-pointer")
		set(F_DBG "${F_DBG} -fstack-protector-strong")

		if(USE_ASAN)
			set(F_DBG "${F_DBG} -fsanitize=address")
		endif()
		if(USE_UBSAN)
			set(F_DBG "${F_DBG} -fsanitize=undefined")
		endif()
		if(USE_TSAN)
			set(F_DBG "${F_DBG} -fsanitize=thread")
		endif()

		set(F_REL "${F_WARN} -std=c++1y -O2 -fomit-frame-pointer")
		set(F_REL "${F_REL} -fstack-protector-strong")
	elseif(CMAKE_CXX_COMPILER_ID MATCHES Clang)
		set(F_WARN "-pedantic -Weverything -Werror")
		set(F_WARN "${F_WARN} -Wno-c++98-compat -Wno-padded")
		set(F_WARN "${F_WARN} -Wno-exit-time-destructors")
		set(F_WARN "${F_WARN} -Wno-c++98-compat-pedantic")
		set(F_WARN "${F_WARN} -Wno-global-constructors")
		set(F_WARN "${F_WARN} -Wno-undefined-reinterpret-cast")
		set(F_WARN "${F_WARN} -Wno-disabled-macro-expansion")

		# Needed for Google's protobuf library.
		set(F_WARN "${F_WARN} -Wno-reserved-id-macro")
		set(F_WARN "${F_WARN} -Wno-missing-variable-declarations")
		set(F_WARN "${F_WARN} -Wno-shorten-64-to-32")
		set(F_WARN "${F_WARN} -Wno-unused-macros")

		set(F_DBG "${F_WARN} -std=c++1y -g -O0 -fno-omit-frame-pointer")
		set(F_DBG "${F_DBG} -fstack-protector-strong")

		if(USE_ASAN)
			set(F_DBG "${F_DBG} -fsanitize=address")
		endif()
		if(USE_UBSAN)
			set(F_DBG "${F_DBG} -fsanitize=undefined")
		endif()
		if(USE_TSAN)
			set(F_DBG "${F_DBG} -fsanitize=thread")
		endif()

		set(F_REL "${F_WARN} -std=c++1y -O2 -fomit-frame-pointer")
		set(F_REL "${F_REL} -fstack-protector-strong")
	elseif(CMAKE_CXX_COMPILER_ID MATCHES MSVC)
		set(F_DBG "/W4 /WX /FIcmu/MSVCWarnings.hpp")

		set(F_REL "/W4 /WX /FIcmu/MSVCWarnings.hpp")

		add_definitions(-DNOMINMAX)
	else()
		set(F_DBG "")
		set(F_REL "")
	endif()

	set(CMAKE_CXX_FLAGS_RELEASE "${F_REL}" PARENT_SCOPE)
	set(CMAKE_CXX_FLAGS_DEBUG "${F_DBG}" PARENT_SCOPE)
endfunction()
